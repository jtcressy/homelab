name: Terraform Layers - Vault
on:
  push:
    branches: [ main ]
    paths:
    - 'terraform-layers/vault/**'
    - '.github/workflows/terraform-vault-layer.yml'
  workflow_dispatch:
  pull_request:
    paths:
    - 'terraform-layers/vault/**'
    - '.github/workflows/terraform-vault-layer.yml'

permissions: write-all

env:
  tf_actions_working_dir: terraform-layers/vault/
  VAULT_ADDR: https://vault.jtcressy.net/
  TF_VAR_vault_bootstrap_token: ${{ secrets.TF_VAR_VAULT_BOOTSTRAP_TOKEN }}
  TF_VAR_vault_self_approle_id: ${{ secrets.VAULT_APPROLE_ID }}
  TF_VAR_vault_self_approle_secret: ${{ secrets.VAULT_APPROLE_SECRET }}

jobs:
  terraform-vault-layer:
    runs-on: ubuntu-latest
    concurrency: terrform-vault-layer
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    services:
      op-connect-sync:
        image: 1password/connect-api:latest
        ports:
          - 8080:8080
        volumes:
          - op-data:/home/opuser/.op/data
        env:
          OP_SESSION: ${{ secrets.OP_CREDENTIALS_B64 }}
      op-connect-api:
        image: 1password/connect-sync:latest
        ports:
          - 8081:8080
        volumes:
          - op-data:/home/opuser/.op/data
        env:
          OP_SESSION: ${{ secrets.OP_CREDENTIALS_B64 }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure 1Password Connect
      uses: 1password/load-secrets-action/configure@v1
      with:
        connect-host: http://localhost:8080
        connect-token: ${{ secrets.OP_ACCESS_TOKEN }}
    
    - name: Load Tailscale Secrets
      uses: 1password/load-secrets-action@v1
      env:
        TAILSCALE_AUTHKEY: op://jtcressy-net-infra/tailscale/ephemeral/credential

    - name: Tailscale
      uses: tailscale/github-action@effa99fe9dc68518c77d0e7c00879f6599714d39
      with:
        authkey: ${{ env.TAILSCALE_AUTHKEY }}
        args: "--advertise-tags=tag:ghactions"

    - name: Setup Vault CLI
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && \
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" && \
        sudo apt-get -q -o=Dpkg::Use-Pty=0 update && sudo apt-get -yq -o=Dpkg::Use-Pty=0 install vault

    - name: Check for Running Vault
      run: vault status

    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Query .terraform-version
      id: terraform-version
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ env.tf_actions_working_dir }}/.terraform-version

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ steps.terraform-version.outputs.content }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -no-color
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform version && terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
