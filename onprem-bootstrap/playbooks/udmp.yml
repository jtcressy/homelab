---
- name: udmp setup
  gather_facts: false
  hosts: unifiudm
  vars:
    udm_onboot_version: 1.0.5
    udm_onboot_download_uri: "https://github.com/boostchicken/udm-utilities/releases/download/1.0.5-fix/udm-boot_{{ udm_onboot_version }}_all.deb"

    unifi_mount_path: "/mnt/data"
    unifi_os_mount_path: "/data"

    unifi_os_container: "unifi-os"
    unifi_os_cmd: podman exec -it "{{ unifi_os_container }}"

    unifi_onboot_directory: "{{ unifi_mount_path }}/on_boot.d/"

  tasks:
  - name: onboot - query package version
    register: onboot_version
    raw: "{{ unifi_os_cmd }} dpkg-query --showformat='${Version}' --show udm-boot"
    ignore_errors: true

  - name: onboot - installation
    when: onboot_version is not defined or ( onboot_version.stdout is defined and onboot_version.stdout != udm_onboot_version )
    block:
      - name: onboot - download package
        raw: curl -L "{{ udm_onboot_download_uri }}" -o "{{ unifi_mount_path }}/unifi-os/udm-boot-{{ udm_onboot_version }}.deb"
      - name: onboot - install package
        raw: "{{ unifi_os_cmd }} dpkg -i {{ unifi_os_mount_path }}/udm-boot-{{ udm_onboot_version }}.deb"

  - name: onboot - ensure onboot directory exists
    raw: mkdir -p "{{ unifi_onboot_directory }}"

  - name: onboot - deploy shell scripts
    with_items:
    - { file: "files/udmp/onboot/00-onboot-sshkeys.sh", enabled: yes }
    - { file: "files/udmp/onboot/03-onboot-podman-update.sh", enabled: yes }
    - { file: "files/udmp/onboot/05-onboot-container.sh", enabled: yes }
    - { file: "files/udmp/onboot/05-onboot-dns.sh", enabled: yes }
    - { file: "files/udmp/onboot/05-onboot-github-ssh.sh", enabled: yes }
    - { file: "files/udmp/onboot/05-onboot-podman-cni.sh", enabled: yes }
    - { file: "files/udmp/onboot/10-onboot-coredns.sh", enabled: yes  }
    - { file: "files/udmp/onboot/11-onboot-tailscale.sh", enabled: yes }
    raw: |-
      [ '{{ item.enabled }}' = 'True' ] && \
      echo "{{ lookup('file', playbook_dir+'/'+item.file) | b64encode }}" | openssl enc -base64 -d > {{ unifi_onboot_directory }}{{ item.file.split("/")[-1] }}
  
  - name: onboot - setup podman cni configs
    with_items:
    - { file: "files/udmp/podman/cni/20-dns.conflist", enabled: yes }
    raw: |-
      [ '{{ item.enabled }}' = 'True' ] && \
      mkdir -p "{{ unifi_mount_path }}/podman/cni/" && \
      echo "{{ lookup('file', item.file) | b64encode }}" | openssl enc -base64 -d > {{ unifi_mount_path }}/podman/cni/{{ item.file.split("/")[-1] }}

  - name: onboot - ensure executable flag for all scripts
    raw: chmod +x {{ unifi_onboot_directory }}/*.sh

  - name: onboot - run scripts unless already connected via tailscale
    # tailscale inventory plugin sets ansible_network_os and is otherwise undefined
    when: ansible_network_os is not defined
    raw: for script in $(ls {{ unifi_onboot_directory }}/*.sh); do sh $script; done;