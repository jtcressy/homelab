apiVersion: v1
kind: ServiceAccount
metadata:
  name: k3s-server-kubeconfig-extractor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-exec
rules:
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get","create","patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k3s-server-kubeconfig-extractor-pod-exec
subjects:
- kind: ServiceAccount
  name: k3s-server-kubeconfig-extractor
roleRef:
  kind: Role
  name: pod-exec
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: k3s-server-kubeconfig-extractor
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: k3s-server-kubeconfig-extractor
      containers:
      - name: copy-kubeconfig-to-secret
        image: rancher/k3s:latest
        command:
        - /bin/sh
        - -c
        - |-
          until [ $(kubectl get pod k3s-server-0 -o jsonpath='{.status.conditions[?(@.type == "ContainersReady")].status}') == "True" ]
          do 
            echo "Waiting for k3s ready..."
            sleep 3
          done
          until kubectl cp -c k3s-server $(cat /run/secrets/kubernetes.io/serviceaccount/namespace)/k3s-server-0:/tmp/kubeconfig.yaml ./temp-kubeconfig.yaml
          do
            echo "Waiting for kubeconfig to be generated..."
            sleep 3
          done
          kubectl --kubeconfig temp-kubeconfig.yaml config view --raw -o jsonpath='{.clusters[?(@.name == "default")].cluster.certificate-authority-data}' | base64 -d > cluster-ca.crt
          kubectl --kubeconfig temp-kubeconfig.yaml config view --raw -o jsonpath='{.users[?(@.name == "default")].user.client-certificate-data}' | base64 -d > client-cert.crt
          kubectl --kubeconfig temp-kubeconfig.yaml config view --raw -o jsonpath='{.users[?(@.name == "default")].user.client-key-data}' | base64 -d > client-key.pem
          kubectl --kubeconfig kubeconfig.yaml config set-cluster $K3S_CLUSTER_NAME --server="https://$K3S_CLUSTER_NAME-k3s-server:6443" --certificate-authority=./cluster-ca.crt --embed-certs=true
          kubectl --kubeconfig kubeconfig.yaml config set-credentials $K3S_CLUSTER_NAME --client-certificate=./client-cert.crt --client-key=./client-key.pem --embed-certs=true
          kubectl --kubeconfig kubeconfig.yaml config set-context $K3S_CLUSTER_NAME --cluster=$K3S_CLUSTER_NAME --user=$K3S_CLUSTER_NAME
          kubectl --kubeconfig kubeconfig.yaml config view
          kubectl create secret generic "${K3S_CLUSTER_NAME}-kubeconfig" --from-file=kubeconfig=kubeconfig.yaml --dry-run=client -o yaml | kubectl apply -f -
        env:
        - name: K3S_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              key: CLUSTER_NAME
              name: cluster-facts
      restartPolicy: Never
